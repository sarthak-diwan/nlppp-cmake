<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Writing Analyzers with VisualText</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=date content="08 27, 2001 3:59:13 PM">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=663>
<meta name=layout-width content=1024>


<!--(Links)=========================================================-->

<link REL="StyleSheet" HREF="../default.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1>Writing Analyzers with VisualText</h1>

<p>The VisualText Basics section includes a set of topics designed to help 
 you build analyzers. As a prerequisite, we recommend you work through 
 the Tutorials to understand the workings of the VisualText GUI. Also, 
 working through the Corporate analyzer documentation and studying the 
 Corporate analyzer will provide a feel for the ordering and specification 
 of the steps, or passes, in a text analyzer.</p>

<p>Building text analyzers is more art than science. VisualText favors 
 a bottom up approach to text processing, where small constructs are processed 
 and grouped (or reduced) first, followed by identification of successively 
 larger components of a text.</p>

<p>One approach that often works well for restricted domains is to create 
 a prototype that processes a single input text end-to-end, to produce 
 the desired analyzer output. In building such a prototype, you should 
 strive to build each pass in as general a way as possible. Once such a 
 prototype is built, a second input text is tested, and the analyzer is 
 reworked so that both inputs are processed in a general way. As more inputs 
 are handled in this fashion, the analyzer will perform better and do more 
 with unseen texts. In a restricted domain, even a small number of representative 
 input texts (e.g., 25-50) can yield dramatic improvements in the processing 
 of novel texts.</p>

<p>Another aspect of this approach is that it is &quot;knowledge free.&quot; 
 For a restricted domain, you don't usually need an ontology or knowledge 
 base for all human knowledge. You build or import knowledge as needed. 
 The broader the domain, of course, the more the analyzer will benefit 
 from large-coverage knowledge bases, such as WordNet.</p>

<p style="margin-bottom: 0;">If you are interested in pre-built generic 
 text analysis capabilities for VisualText, you may wish to download one 
 of the versions of TAIParse available in the Apps section of our website 
 at</p>

<p style="margin-bottom: 0;">http://www.textanalysis.com/Apps/apps.html</p>

<p style="margin-bottom: 0;">&nbsp;</p>

</body>

</html>
