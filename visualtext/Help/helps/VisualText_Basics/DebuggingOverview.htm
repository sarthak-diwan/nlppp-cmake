<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Debugging Overview</title>

<!--(Meta)==========================================================-->

<meta HTTP-EQUIV=Content-Type CONTENT="text/html; charset=windows-1252">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=4938>
<meta name=layout-width content=775>
<meta name=date content="08 28, 2001 11:24:26 PM">


<!--(Links)=========================================================-->

<link REL=StyleSheet HREF="../default.css">



<!--(Style Sheet)===================================================-->

<style>
<!--

A:visited {
	color: #800080;
}

A:link {
	color: #0000ff;
}

-->
</style>


</head>

<!--(Body)==========================================================-->


<body>

<h1>Working with Debugging Tools</h1>

<p>VisualText provides a number of debugging tools to make building text 
 analyzers easier. Screen shots from this section are from the VisualText 
 Sample &quot;Corporate&quot; analyzer.</p>

<p><span style="font-weight: bold;"><font style="color: #008080;"
											color=#008080>Debug Structure: 
 Trees</font></span></p>

<p>Almost all debugging tools in VisualText are based on parse trees. VisualText 
 analyzers build parse trees, which organize information into meaningful 
 chunks. You can debug an analyzer pass-by-pass, by setting the <a HREF="../VisualText_Interface/Toolbars/Workspace_Toolbar.htm#Toggle_Generate_Logs">Generate 
 Logs</a> button and running the analyzer:</p>

<p style="text-align: center;"
	align=center><img src="../HowToBuild/Debugging/Image196.gif"
						style="width: 156px;
								height: 63px;
								border-style: none;
								margin-top: 0px;
								margin-bottom: 0px;
								margin-left: 0px;
								margin-right: 0px;"
						width=156
						height=63
						border=0>&nbsp; followed by <img src="../HowToBuild/Debugging/Image197.gif"
														style="width: 145px;
	height: 59px;
	border-style: none;
	margin-top: 0px;
	margin-bottom: 0px;
	margin-left: 0px;
	margin-right: 0px;"
														width=145
														height=59
														border=0></p>

<p>This will generate analyzer log files that contain trees for each text 
 processed. Each text will have its own set of trees. The log files are 
 displayed in the Text Tab under (indented and below) the corresponding 
 text file. (A red checkmark in a file indicates the file has been analyzed.) 
 You can see each of the log files generated for a file by clicking on 
 the plus sign in front of the text file. Log files for each pass in the 
 analyzer sequence have the name 'ana###.log' where ### is the number of 
 the pass in the analyzer sequence:</p>

<p style="text-align: center;"
	align=center><img src="../HowToBuild/Debugging/Image198.gif"
						style="width: 149px;
								height: 197px;
								border-style: none;
								margin-top: 0px;
								margin-bottom: 0px;
								margin-left: 0px;
								margin-right: 0px;"
						width=149
						height=197
						border=0></p>

<p><span style="font-weight: bold;"><font style="color: #008080;"
											color=#008080>Debug Context: 
 Ana Tab</font></span></p>

<p>The Ana Tab provides the context for what tree is displayed during debugging. 
 There is a tree built for every pass and when a pass is chosen in the 
 Ana Tab, all subsequent trees will be built from the selected pass.</p>

<h2><a name=Highlighting></a>Highlighting</h2>

<p>Highlighting is the quickest way to see which rules in a pass have fired. 
 It operates on the text in the text file you are analyzing. Highlighting 
 is activated by clicking the <a HREF="../VisualText_Interface/Toolbars/Workspace_Toolbar.htm#Toggle_Highlight_Mode">Toggle 
 Highlight Mode</a> button on the toolbar. It must be turned on before 
 you run the analyzer.</p>

<p style="text-align: center;"
	align=center><img src="../HowToBuild/Debugging/Image200.gif"
						style="width: 131px;
								height: 58px;
								border-style: none;
								margin-top: 0px;
								margin-bottom: 0px;
								margin-left: 0px;
								margin-right: 0px;"
						width=131
						height=58
						border=0></p>

<p>Within the trees generated for each pass in the analyzer, VisualText 
 records which nodes were matched and which nodes were built in the pass. 
 Built nodes are highlighted in blue. Green highlighting indicates other 
 nodes that matched rules in the pass.</p>

<p><span style="font-weight: bold;"><font style="color: #008080;"
											color=#008080>Blue Highlighting</font></span></p>

<p>If a pass has rules that match a text and a tree is constructed or modified, 
 the highlighting appears in blue. Below, the rule for &quot;dollars&quot; 
 builds a new concept &quot;_money&quot; in the tree and therefore highlights 
 the text in blue.</p>

<p style="text-align: center;"
	align=center><img src="../HowToBuild/Debugging/Image205.gif"
						style="width: 573px;
								height: 336px;
								border-style: none;
								margin-top: 0px;
								margin-bottom: 0px;
								margin-left: 0px;
								margin-right: 0px;"
						width=573
						height=336
						border=0></p>

<p><span style="font-weight: bold;"><font style="color: #008080;"
											color=#008080>Green Highlighting</font></span></p>

<p>For rules that do not construct or modify a tree, highlighting is green. 
 Below, the rule containing the concept &quot;_company&quot; matches and 
 constructs a concept in the Knowledge Base but does not change the parse 
 tree, therefore the text is highlighted in green:</p>

<p style="text-align: center;"
	align=center><img src="../HowToBuild/Debugging/Image202.gif"
						style="width: 630px;
								height: 391px;
								border-width: 1px;
								border-style: solid;
								margin-top: 0px;
								margin-bottom: 0px;
								margin-left: 0px;
								margin-right: 0px;"
						width=630
						height=391
						border=1></p>

<h2><a name=dump_files></a>Dump Files</h2>

<p><span style="font-weight: bold;">Dump files</span> are a convenient 
 aid to debugging. They record information useful in debugging the analyzer. 
 Dump files can be displayed by using the &quot;Wheelbarrow&quot; icon 
 in the Debug Toolbar with a pulldown menu:</p>

<p style="text-align: center;"
	align=center><img src="../HowToBuild/Debugging/Image211.gif"
						style="width: 350px;
								height: 310px;
								border-style: none;
								margin-top: 0px;
								margin-bottom: 0px;
								margin-left: 0px;
								margin-right: 0px;"
						width=350
						height=310
						border=0></p>

<p>Dump files are created by printing output to any file with a &quot;txt&quot; 
 extension using the piping printout operator &quot;&lt;&lt;&quot;. Below 
 is the NLP++ code for printing out to the above &quot;lookup.txt&quot; 
 dump file:</p>

<p style="text-align: center;"
	align=center><img src="../HowToBuild/Debugging/Image212.gif"
						style="width: 388px;
								height: 67px;
								border-style: none;
								margin-top: 0px;
								margin-bottom: 0px;
								margin-left: 0px;
								margin-right: 0px;"
						width=388
						height=67
						border=0></p>

<p>One convenient Right-Click menu function will get you started in printing 
 to a dump file. It printouts out a line to a &quot;txt&quot; file with 
 the same name as the pass file. In this case, we clicked on the &quot;lookup&quot; 
 pass in our corporate analyzer and the Right-Click menu adds the line 
 above the menu as shown below:</p>

<p style="text-align: center;"
	align=center><img src="../HowToBuild/Debugging/Image213.gif"
						style="width: 376px;
								height: 297px;
								border-style: none;
								margin-top: 0px;
								margin-bottom: 0px;
								margin-left: 0px;
								margin-right: 0px;"
						width=376
						height=297
						border=0></p>

<h2><a name=page_mode></a>Page Mode</h2>

<p>Page Mode is used to see changes in parse trees between passes in the 
 Ana Tab, or between text files themselves. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Page 
 Mode is activated by selecting the Toggle Page Mode button on the Debug 
 Toolbar:</p>

<p style="text-align: center;"
	align=center><img src="../HowToBuild/Debugging/Image206.gif"
						style="width: 130px;
								height: 65px;
								border-style: none;
								margin-top: 0px;
								margin-bottom: 0px;
								margin-left: 0px;
								margin-right: 0px;"
						width=130
						height=65
						border=0></p>

<p><span style="font-weight: bold;"><font style="color: #008080;"
											color=#008080>Page Mode: Between 
 Passes</font></span></p>

<p>Page Mode provides a convenient way to shuffle among sets of views. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->For example, 
 selecting pass 16 below causes the parse tree for that pass to display 
 in the parse tree view. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Selecting 
 pass 17 causes that parse tree view to <span style="font-style: italic;">automatically</span> 
 display the parse tree for pass 17.</p>

<p style="text-align: center;"
	align=center><img src="../HowToBuild/Debugging/Image209.gif"
						style="width: 476px;
								height: 312px;
								border-style: none;
								margin-top: 0px;
								margin-bottom: 0px;
								margin-left: 0px;
								margin-right: 0px;"
						width=476
						height=312
						border=0></p>

<p style="text-align: center;"
	align=center><img src="../HowToBuild/Debugging/Image210.gif"
						style="width: 474px;
								height: 189px;
								border-style: none;
								margin-top: 0px;
								margin-bottom: 0px;
								margin-left: 0px;
								margin-right: 0px;"
						width=474
						height=189
						border=0></p>

<p><span style="font-weight: bold;"><font style="color: #008080;"
											color=#008080>Page Mode: Moving 
 Among Texts</font></span></p>

<p>A second use for Page Mode is to look at changes across text files. 
 With the Page Mode turned on, text files (including dump files), parse 
 tree windows, and browser windows will update their content with the current 
 text selected. The arrows next to the Page Mode will move the text selection 
 in the Text Tab either up or down:</p>

<p style="text-align: center;"
	align=center><img src="../HowToBuild/Debugging/Image207.gif"
						style="width: 121px;
								height: 224px;
								border-style: none;
								margin-top: 0px;
								margin-bottom: 0px;
								margin-left: 0px;
								margin-right: 0px;"
						width=121
						height=224
						border=0><img src="../HowToBuild/Debugging/Image208.gif"
										style="width: 127px;
												height: 64px;
												border-style: none;
												margin-top: 0px;
												margin-bottom: 0px;
												margin-left: 0px;
												margin-right: 0px;"
										width=127
										height=64
										border=0></p>

<h2><a name=syntax_error></a>Syntax Errors</h2>

<p>VisualText informs you of syntax errors via the Log Window. If a syntax 
 error is detected, you can often go directly to the line in the pass file 
 to locate the problem by double-clicking on the error in the Log Window. 
 Below, we forgot an opening parenthesis and by double-clicking on the 
 error, VisualText opens up the correct pass file and moves the cursor 
 to the line containing the error:</p>

<p style="text-align: center;"
	align=center><img src="../HowToBuild/Debugging/Image214.gif"
						style="width: 265px;
								height: 198px;
								border-style: none;
								margin-top: 0px;
								margin-bottom: 0px;
								margin-left: 0px;
								margin-right: 0px;"
						width=265
						height=198
						border=0></p>

<h2 style="font-weight: bold;"><a name=text_search></a><span style="font-weight: normal;">Searching 
 in Text</span></h2>

<p>VisualText's <a href="../VisualText_Interface/Windows/Find_in_Files_Dialog.htm">Find 
 in Files</a> dialog is handy for finding words and concepts in an analyzer 
 project. One can search for a word or phrase in only the word files, text 
 files, or even in other analyzers in the user's analyzer area:</p>

<p style="text-align: center;"
	align=center><img src="../VisualText_Interface/Windows/findInFilesCorpSample.gif"
						x-maintain-ratio=TRUE
						style="width: 383px;
								height: 195px;
								border-left-style: Solid;
								border-left-width: 1px;
								border-right-style: Solid;
								border-right-width: 1px;
								border-top-style: Solid;
								border-top-width: 1px;
								border-bottom-style: Solid;
								border-bottom-width: 1px;
								float: none;"
						width=383
						height=195
						border=1></p>

<p>Search results are displayed in the <a href="../Find_Window.htm">Find 
 Window</a>. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->By 
 double-clicking on a search result line, you can go immediately to the 
 file and line containing an instance of the search string:</p>

<p style="text-align: center; margin-bottom: 0;"
	align=center><img src="../HowToBuild/Debugging/Image216.gif"
						style="width: 483px;
								height: 201px;
								border-style: none;
								margin-top: 0px;
								margin-bottom: 0px;
								margin-left: 0px;
								margin-right: 0px;"
						width=483
						height=201
						border=0> </p>

<p style="margin-bottom: 0;">&nbsp;</p>

<p style="margin-bottom: 0;">&nbsp;</p>

</body>

</html>
