<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>POStagger</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=663>
<meta name=layout-width content=1027>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="default.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1>POStagger</h1>

<p style="color: #ff0000;"><span style="font-weight: bold;">NOTE:</span> 
 We are no longer bundling and distributing this third party tagger, as 
 its licensing is incompatible with the commercial uses of VisualText.</p>

<p>Our most recent part-of-speech tagger that keys off our TAIParse general 
 analyzer for English is described at <a href="TAIParse.htm">TAIParse.</a></p>

<p>The POStagger analyzer project can be found in VisualText\apps. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->As 
 an example, it invokes the LexTagger part-of-speech tagger from UMIST, 
 which is available in VisualText\apps\LexTagger-1.0 and also by contacting 
 the author, Argyris Vasilakopoulos, for updates and documentation at </p>

<p><a class=moz-txt-link-abbreviated
		href="mailto:a.vasilakopoulos@postgrad.umist.ac.uk">a.vasilakopoulos@postgrad.umist.ac.uk</a></p>

<p>The POStagger analyzer consists of only two passes. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The 
 first is the default tokenize pass that initiates all VisualText analyzers. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The second 
 pass looks like</p>

<p style="color: #0000ff; font-weight: bold;">@CODE<span style="color: #000000;"><br>
user::postagger();</span><br>
@@CODE</p>

<p>which invokes the LexTagger software with the current input file, then 
 parses the result and layers it into the analyzer's current parse tree. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The handshake 
 code can be found in POStagger\User, within the Ucode.cpp and Umisc.cpp 
 files.</p>

<p>In order to use the analyzer, you'll need to edit the <span style="font-weight: bold;">run.bat</span> 
 and the <span style="font-weight: bold;">Properties.txt</span> files within 
 the LexTagger-1.0 folder, in order to fix the pathnames for your machine. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->You'll 
 also need to edit the paths in the User project to point to your copy 
 of LexTagger.</p>

<p>Note that the current handshake code in the User project copies the 
 input file to the LexTagger-1.0\test folder. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->A 
 more elegant handshake would write out the Properties.txt file for each 
 input, so that large input files won't need to be copied.</p>

<p>Other part-of-speech taggers could easily be swapped in for LexTagger 
 with some editing of the example handshake in the User project.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

</body>

</html>
